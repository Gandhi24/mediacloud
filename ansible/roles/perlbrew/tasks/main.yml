---

- name: Test if Perlbrew is installed
  stat:
    path: "{{ perlbrew_root }}/bin/perlbrew"
  register: have_perlbrew
  become: true
  become_user: "{{ mediacloud_user }}"
  tags:
    - perlbrew

- name: Install Perlbrew
  block:

    - name: Create temporary directory for perlbrew-install
      tempfile:
        state: directory
        suffix: perlbrew_install
      register: perlbrew_install_tempdir
      become: true
      become_user: "{{ mediacloud_user }}"
      tags:
        - perlbrew

    - name: Download perlbrew-install
      get_url:
        url: https://install.perlbrew.pl/
        dest: "{{ perlbrew_install_tempdir.path }}/perlbrew-install"
      become: true
      become_user: "{{ mediacloud_user }}"
      tags:
        - perlbrew

    - name: "Install Perlbrew"
      command: "bash {{ perlbrew_install_tempdir.path }}/perlbrew-install"
      args:
        creates: "{{ perlbrew_root }}/bin/perlbrew"
      become: true
      become_user: "{{ mediacloud_user }}"
      tags:
        - perlbrew

  when: have_perlbrew.stat.executable is not defined or have_perlbrew.stat.executable == False
  tags:
    - perlbrew

- name: Install Perlbrew cpanm
  command: "{{ perlbrew_root }}/bin/perlbrew install-cpanm"
  args:
    creates: "{{ perlbrew_root }}/bin/cpanm"
  become: true
  become_user: "{{ mediacloud_user }}"
  tags:
    - perlbrew

- name: Install Perlbrew patchperl
  command: "{{ perlbrew_root }}/bin/perlbrew install-patchperl"
  args:
    creates: "{{ perlbrew_root }}/bin/patchperl"
  become: true
  become_user: "{{ mediacloud_user }}"
  tags:
    - perlbrew

- name: Get system Perl version
  command: "perl -e 'print substr( $^V, 1 )'"
  changed_when: false
  register: system_perl_version
  become: true
  become_user: "{{ mediacloud_user }}"
  tags:
    - perlbrew

- name: Ensure that system Perl is of the correct version
  assert:
    that:
      - system_perl_version.stdout is version_compare(perl_min_version, '>=')
  tags:
    - perlbrew

- name: Get system binary Perl path
  shell: "command -v perl"  # `whereis` usually gives looney results
  changed_when: false
  register: system_perl_binary_path
  tags:
    - perlbrew
    - skip_ansible_lint # need actual shell for "command -v"

- name: Create Perlbrew directory for system Perl
  file:
    path: "{{ perlbrew_root }}/perls/perl-system/"
    state: directory
  become: true
  become_user: "{{ mediacloud_user }}"
  tags:
    - perlbrew

- name: Symlink system Perl to Perlbrew directory
  file:
    src: "{{ system_perl_binary_path.stdout | dirname }}"
    dest: "{{ perlbrew_root }}/perls/perl-system/bin"
    state: link
  become: true
  become_user: "{{ mediacloud_user }}"
  tags:
    - perlbrew

- name: Initialize system Perl in Perlbrew # to create library directory
  command: "{{ perlbrew_root }}/bin/perlbrew use perl-system"
  args:
    creates: "{{ mediacloud_home }}/perl5/perlbrew/perls/perl-system/.version"
  environment:
    PERLBREW_HOME: "{{ perlbrew_home }}"
    PERLBREW_ROOT: "{{ perlbrew_root }}"
  become: true
  become_user: "{{ mediacloud_user }}"
  tags:
    - perlbrew

- name: Create 'mediacloud' Perlbrew library
  command: "{{ perlbrew_root }}/bin/perlbrew lib create perl-system@mediacloud"
  args:
    creates: "{{ perlbrew_home }}/libs/perl-system@mediacloud"
  register: perlbrew_lib_create_result
  environment:
    PERLBREW_HOME: "{{ perlbrew_home }}"
    PERLBREW_ROOT: "{{ perlbrew_root }}"
  become: true
  become_user: "{{ mediacloud_user }}"
  tags:
    - perlbrew

- name: Initialize 'mediacloud' Perlbrew library
  command: "{{ perlbrew_root }}/bin/perlbrew use perl-system@mediacloud"
  args:
    creates: "{{ perlbrew_home }}/libs/perl-system@mediacloud/lib/perl5"
  environment:
    PERLBREW_HOME: "{{ perlbrew_home }}"
    PERLBREW_ROOT: "{{ perlbrew_root }}"
  become: true
  become_user: "{{ mediacloud_user }}"
  tags:
    - perlbrew
