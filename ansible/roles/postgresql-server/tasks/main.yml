- name: Include variables
  include_vars: ../vars/main-{{ ansible_distribution }}.yml
  tags:
    - postgresql-server

- name: Include tasks that install PostgreSQL
  include_tasks: install-{{ ansible_distribution }}.yml
  tags:
    - postgresql-server

- name: Test if PostgreSQL configuration directory exists
  stat:
    path: "{{ postgresql_conf_dir }}"
  register: postgresql_conf_dir_stat
  tags:
    - postgresql-server

- name: Ensure that PostgreSQL configuration path is a directory
  assert:
    that:
      - "postgresql_conf_dir_stat.stat.isdir is defined and postgresql_conf_dir_stat.stat.isdir"
  tags:
    - postgresql-server

- name: Set PostgreSQL main configuration file
  set_fact:
    postgresql_resolved_conf_file: "{{ postgresql_conf_dir }}/postgresql.conf"
  tags:
    - postgresql-server

- name: Test if PostgreSQL main configuration file exists
  stat:
    path: "{{ postgresql_resolved_conf_file }}"
  register: postgresql_resolved_conf_file_stat
  tags:
    - postgresql-server

- name: Ensure that PostgreSQL main configuration file is a file
  assert:
    that:
      - "postgresql_resolved_conf_file_stat.stat.exists is defined and postgresql_resolved_conf_file_stat.stat.exists"
  tags:
    - postgresql-server

- name: Set PostgreSQL custom configuration directory
  set_fact:
    postgresql_custom_conf_dir: "conf.d"
  tags:
    - postgresql-server

- name: Set PostgreSQL custom configuration path
  set_fact:
    postgresql_custom_conf_path: "{{ postgresql_conf_dir }}/{{ postgresql_custom_conf_dir }}"
  tags:
    - postgresql-server

- name: Create custom configuration directory in PostgreSQL configuration directory
  file:
    path: "{{ postgresql_custom_conf_path }}"
    owner: "{{ postgresql_conf_user }}"
    group: "{{ postgresql_conf_group }}"
    state: directory
  become: "{{ postgresql_conf_become }}"
  tags:
    - postgresql-server

- name: Ensure that custom configuration gets included from main PostgreSQL configuration file
  lineinfile:
    dest: "{{ postgresql_resolved_conf_file }}"
    regexp: "^include_dir\\s=\\s'{{ postgresql_custom_conf_dir }}'$"
    line: "include_dir = '{{ postgresql_custom_conf_dir }}'"
    state: present
  become: "{{ postgresql_conf_become }}"
  notify:
    - "restart postgresql"
  tags:
    - postgresql-server

- name: Copy PostgreSQL configuration file for Media Cloud
  template:
    src: templates/01-mediacloud.conf.j2
    dest: "{{ postgresql_custom_conf_path }}/01-mediacloud.conf"
    owner: "{{ postgresql_conf_user }}"
    group: "{{ postgresql_conf_group }}"
  become: "{{ postgresql_conf_become }}"
  register: copy_postgresql_configuration
  notify:
    - "restart postgresql"
  tags:
    - postgresql-server

- name: "Restart PostgreSQL service"
  service:
    name: postgresql
    state: restarted
  when: copy_postgresql_configuration.changed
  become: true
  become_user: root
  tags:
    - postgresql-server

- name: Include tasks that start PostgreSQL
  include_tasks: start-{{ ansible_distribution }}.yml
  tags:
    - postgresql-server

- name: Create PostgreSQL user for Media Cloud user
  postgresql_user:
    name: "{{ mediacloud_user }}"
    login_user: "{{ postgresql_psql_login_user }}"
  become: "{{ postgresql_psql_become }}"
  become_user: "{{ postgresql_psql_become_user }}"
  tags:
    - postgresql-server

- name: Create PostgreSQL database for current user
  postgresql_db:
    name: "{{ mediacloud_user }}"
    owner: "{{ mediacloud_user }}"

    # Force UTF-8 encoding because some PostgreSQL installations default to
    # "LATIN1" and then LENGTH() and similar functions don't work correctly
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8

    # "template1" is preinitialized with "LATIN1" encoding on some systems and
    # doesn't work, so using a cleaner "template0":
    template: template0

    login_user: "{{ postgresql_psql_login_user }}"
  become: "{{ postgresql_psql_become }}"
  become_user: "{{ postgresql_psql_become_user }}"
  tags:
    - postgresql-server
